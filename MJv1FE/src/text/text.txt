url
获取所有人信息（get）/apartment
查询（post）/apartment/query
添加（post）/apartment/add
修改（post）/apartment/updata
删除（post）/apartment/delect

返回结果
key：codo --value:1/0
key: data -- value:数据 json格式
key:msg -- value:消息

my-vue-app/  
├── node_modules/        # 依赖包目录  
├── public/              # 公共文件目录，静态资源 (如 index.html)  
│   └── index.html       # 应用的入口 HTML 文件  
├── src/                 # 源代码目录  
│   ├── assets/          # 静态资源，比如图片、字体等  
│   ├── components/      # Vue 组件目录  
│   ├── views/           # 视图级别的组件（页面组件）  
│   ├── router/          # 路由相关的文件  
│   │   └── index.js     # Vue Router 配置  
│   ├── store/           # Vuex 状态管理目录  
│   │   └── index.js     # Vuex 配置  
│   ├── App.vue          # 根组件  
│   ├── main.js          # 应用的入口文件  
│   └── styles/          # 样式文件目录  
│       └── index.css    # 全局样式文件  
├── tests/               # 测试相关文件  
│   └── unit/            # 单元测试  
│       └── Example.spec.js   # 测试示例  
├── .env                 # 环境变量配置文件  
├── .gitignore           # Git 忽略文件  
├── package.json         # 项目描述和依赖配置  
├── README.md            # 项目的说明文件  
└── vite.config.js       # Vite 的配置文件（如果使用 Vite，则为此文件）

node_modules/：存放项目所有依赖的目录。
public/：存放需要直接暴露给用户的静态资源，比如 index.html 文件。在构建时，文件将被直接复制到输出目录。
src/：存放应用源代码的目录，是大部分开发的地方。
assets/：存放静态资源，比如图片、视频等。
components/：存放可重用的 Vue 组件。
views/：存放视图组件，通常对应应用的页面。
router/：存放与 Vue Router 相关的配置和文件。
store/：存放 Vuex 状态管理配置及文件。
App.vue：根组件，是应用的根实例。
main.js：应用的入口文件，在这里初始化 Vue 实例，注册插件等。
styles/：存放全局样式或 CSS 文件。
tests/：存放测试文件，根据需要可以包含单元测试和端到端测试，文件夹结构根据具体框架而异。
.env：存放环境变量配置的文件。
.gitignore：定义在 Git 中要忽略的文件和文件夹。
package.json：项目的元数据，包括名称、版本、依赖包等。
README.md：项目的文档说明，通常用于提供项目的介绍、使用指南等。
vite.config.js（或 vue.config.js）：Vite 或 Vue CLI 的配置文件，用于配置构建工具的行为。

post请求格式：
application/x-www-form-urlencoded
application/json
multipart/form-data
text/xml



// 获取所有顾客的信息

// const item = { cno: '001', name: '张三', age: 30 };  
// const newItem = { ...item, mobile: '123456789' };  

// const numbers = [1, 2, 3, 4];  
// const squares = numbers.map(num => num * num);  


开始时找cookies，看有没有记录
如果没有就表示没登录，
有就表示顾客或管理，
没登陆时预订会弹出提示登录按钮
cookies有
const fetchProtectedResource = async () => {
    try {
        const response = await apiClient.get('protected-resource');
        if (response.status === 200) {
        }
    } catch (error) {
        console.error('Error fetching resource:', error.response);
        if (error.response.status === 401) {
            // 需要刷新 Token  
            refreshAccessToken(); // 实现刷新 Token 的函数  
        }
    }
};
const refreshAccessToken = async () => {
    try {
        const response = await apiClient.post('refresh-token');
        if (response.status === 200) {
            localStorage.setItem('accessToken', response.data.access); // 更新 Access Token  
        }
    } catch (error) {
        console.error('Unable to refresh token. Logging out.');
        logout(); // 处理注销逻辑  
    }
};


公寓管理系统可能的 app 设计
对于一个公寓管理系统，可以考虑以下几个 app：

用户管理（users）：

处理用户注册、登录、权限和角色管理。
模型：用户、角色、权限。
公寓管理（apartments）：

管理公寓信息，如地址、房间类型、租金等。
模型：公寓、房间、租金记录。
租户管理（tenants）：

处理与租户相关的信息，如租户申请、租赁合同等。
模型：租户、租赁合同、支付记录。
维护请求（maintenance）：

用于提交和处理维护请求，跟踪维护进度。
模型：维护请求、技术人员、工作单。
财务管理（finance）：

处理账单，支付和财务报告。
模型：账单、支付、交易记录。
通知系统（notifications）：

提供通知功能，例如公寓政策变更、活动通知等。
模型：通知、消息、公告。